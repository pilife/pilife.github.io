<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YouShouldKnow</title>
  
  <subtitle>The world is wonderful, you should know more</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.youshouldknow.tech/"/>
  <updated>2019-01-12T20:00:47.856Z</updated>
  <id>http://blog.youshouldknow.tech/</id>
  
  <author>
    <name>Frank Zhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>protocol buffers</title>
    <link href="http://blog.youshouldknow.tech/2019/01/13/protocol-buffers/"/>
    <id>http://blog.youshouldknow.tech/2019/01/13/protocol-buffers/</id>
    <published>2019-01-12T19:54:44.000Z</published>
    <updated>2019-01-12T20:00:47.856Z</updated>
    
    <content type="html"><![CDATA[<p>本教程旨在让我们学会：</p><ol><li>定义一个.proto文件</li><li>使用 protocol buffer complier</li><li>用户 Java protocol buffer API 来读写信息</li></ol><h4 id="首先我们结合实际的应用场景来了解一下，为什么需要protocol-buffers"><a href="#首先我们结合实际的应用场景来了解一下，为什么需要protocol-buffers" class="headerlink" title="首先我们结合实际的应用场景来了解一下，为什么需要protocol buffers?"></a>首先我们结合实际的应用场景来了解一下，为什么需要protocol buffers?</h4><p>这里我们是用一个通讯录对文件的读写来完成对用户通讯信息的读写的例子作为介绍。</p><p>当我们要序列化和以及恢复这种有结构的数据，有如下几种方法。</p><ul><li>利用Java的序列化机制。但是存在如下问题：<ul><li>存在许多众所周知的问题 (see Effective Java, by Josh Bloch pp. 213)</li><li>不能很好地和其他语言C++/Python共享数据（和语言的耦合性太高）</li></ul></li><li>自定义一个特定的（ad-hoc）方式把数据项编码成一个字符串。比如将四个整数编码为”12:3:-23:67”。这是一种简单而灵活的方法，尽管它需要编写一次性（这里的英文是one-off, 意思为happen only once，我理解是只适用于这个场景的解码和编码方法，因此翻译为一次性的）的编码和解码的代码，而且解码会产生很小的运行时间成本。所以这种方式很适合编码简单的数据。</li><li>将数据序列化为XML。 这种方法可能非常有吸引力，因为XML是可读的，并且有许多语言的绑定库。 如果您想与其他应用程序/项目共享数据，这可能是一个不错的选择。 然而，XML是众所周知的空间密集型，<u>编码/解码可能会给应用程序带来巨大的性能损失</u>。 另外，导航XML DOM树比导航类中的简单字段通常要复杂得多。</li></ul><p>Protocol buffers是解决这个问题的灵活，高效的自动化解决方案。</p><p>你只需要写一个你想要存储的数据结构的描述.proto文件。之后protocol buffer compiler会创建一个类。这个类</p><ol><li>用高效的二进制格式实现了自动编码和解码。</li><li>对字段提供了getters和setters。</li><li>将读写的细节作为一个单元处理</li><li>支持拓展格式，并且保持对旧的编码的数据读取的兼容。</li></ol><h4 id="下面介绍具体的使用："><a href="#下面介绍具体的使用：" class="headerlink" title="下面介绍具体的使用："></a>下面介绍具体的使用：</h4><ul><li><p>定义.proto文件的方式</p><ul><li>Extend info<ul><li>package（区分不同project）</li><li>java_package（java的包, default=package）</li><li>java_outer_classname（java的类名, default=filename2camelcase）</li></ul></li><li>Massage declaration<ul><li>field types(default value): bool(false), int32(0), float(0), double(0), string(“”)</li><li>enum定义</li><li>tag: field在二进制编码中使用的标记。所以1-15（需要少于一个字节）一般赋予常用的和repeated的元素。&gt;=16的给一些不常使用的optional元素。</li><li>modifiers: required(少用，对拓展限制很强), optional, repeated</li></ul></li></ul><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">"proto2"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> tutorial;</span><br><span class="line"></span><br><span class="line"><span class="keyword">option</span> java_package = <span class="string">"com.example.tutorial"</span>;</span><br><span class="line"><span class="keyword">option</span> java_outer_classname = <span class="string">"AddressBookProtos"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">required</span> <span class="built_in">string</span> name = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">required</span> <span class="built_in">int32</span> id = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">optional</span> <span class="built_in">string</span> email = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">enum</span> <span class="title">PhoneType</span> </span>&#123;</span><br><span class="line">    MOBILE = <span class="number">0</span>;</span><br><span class="line">    HOME = <span class="number">1</span>;</span><br><span class="line">    WORK = <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">message</span> <span class="title">PhoneNumber</span> </span>&#123;</span><br><span class="line">    <span class="keyword">required</span> <span class="built_in">string</span> number = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">optional</span> PhoneType type = <span class="number">2</span> [default = HOME];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">repeated</span> PhoneNumber phones = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">AddressBook</span> </span>&#123;</span><br><span class="line">  <span class="keyword">repeated</span> Person people = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编译该文件(-I用于import)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protoc -I=$SRC_DIR --java_out=$DST_DIR $SRC_DIR/addressbook.proto</span><br></pre></td></tr></table></figure></li><li><p>生成的Class文件如何使用（生成了什么，提供了什么功能）</p><ul><li><p>生成了Message对应的class。每个class有自己的Builder。且由protocol compiler生成的类都是对应JAVA风格的驼峰命名。<u>这里建议在.proto文件中使用小写字母+下划线</u>。（因为protocol compiler是在小写字母+下划线规范上，解析生成对应语言的风格的代码）</p></li><li><p>Message: 信息对象，immutable，不可被修改</p><ul><li>Singular field: has, get</li><li>Repeated fields: getList, getCount, get(index)</li><li>标准方法，Message接口声明的<ul><li>isInitialized(): checks if all the required fields have been set.</li><li>toString(): returns a human-readable representation of the message, particularly useful for debugging</li></ul></li><li>序列化和解码<ul><li>byte[] toByteArray();: serializes the message and returns a byte array containing its raw bytes.</li><li>static Person parseFrom(byte[] data);: parses a message from the given byte array.</li><li>void writeTo(OutputStream output);: serializes the message and writes it to an OutputStream.</li><li>static Person parseFrom(InputStream input);: reads and parses a message from an InputStream.</li></ul></li></ul></li><li><p>Builder: 信息对象的构造器，用来创建massage对象</p><ul><li>Singular field: has, get, set, clear</li><li>Repeated fields: getList, getCount, get(index), set(index, value), add(value), addAll(value), clear</li><li>标准方法，Message.Builder接口声明的<ul><li>isInitialized()</li><li>toString()</li><li>mergeFrom(Message other):  merges the contents of other into this message, overwriting singular scalar fields, merging composite fields, and concatenating repeated fields</li><li>clear(): clears all the fields back to the empty state</li></ul></li></ul></li><li><p>Enums and Nested Classes:</p><p>枚举类型会自动在声明的类的内部生成</p></li></ul><blockquote><p>由于协议缓冲区类基本上是哑数据持有者（如C中的strcuts），所以注意这里要拓展数据类的功能，比如添加一些行为，不可以通过继承的方式，因为这将打破protocol buffer内部的机制。可以通过包装(wrap)数据类到特定于应用程序的类中。（适配器模式）</p></blockquote></li><li><p>尝试写入文件</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.tutorial.AddressBookProtos.AddressBook;</span><br><span class="line"><span class="keyword">import</span> com.example.tutorial.AddressBookProtos.Person;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddPerson</span> </span>&#123;</span><br><span class="line">  <span class="comment">// This function fills in a Person message based on user input.</span></span><br><span class="line">  <span class="function"><span class="keyword">static</span> Person <span class="title">PromptForAddress</span><span class="params">(BufferedReader stdin,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 PrintStream stdout)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Person.Builder person = Person.newBuilder();</span><br><span class="line"></span><br><span class="line">    stdout.print(<span class="string">"Enter person ID: "</span>);</span><br><span class="line">    person.setId(Integer.valueOf(stdin.readLine()));</span><br><span class="line"></span><br><span class="line">    stdout.print(<span class="string">"Enter name: "</span>);</span><br><span class="line">    person.setName(stdin.readLine());</span><br><span class="line"></span><br><span class="line">    stdout.print(<span class="string">"Enter email address (blank for none): "</span>);</span><br><span class="line">    String email = stdin.readLine();</span><br><span class="line">    <span class="keyword">if</span> (email.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      person.setEmail(email);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">      stdout.print(<span class="string">"Enter a phone number (or leave blank to finish): "</span>);</span><br><span class="line">      String number = stdin.readLine();</span><br><span class="line">      <span class="keyword">if</span> (number.length() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      Person.PhoneNumber.Builder phoneNumber =</span><br><span class="line">        Person.PhoneNumber.newBuilder().setNumber(number);</span><br><span class="line"></span><br><span class="line">      stdout.print(<span class="string">"Is this a mobile, home, or work phone? "</span>);</span><br><span class="line">      String type = stdin.readLine();</span><br><span class="line">      <span class="keyword">if</span> (type.equals(<span class="string">"mobile"</span>)) &#123;</span><br><span class="line">        phoneNumber.setType(Person.PhoneType.MOBILE);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">"home"</span>)) &#123;</span><br><span class="line">        phoneNumber.setType(Person.PhoneType.HOME);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">"work"</span>)) &#123;</span><br><span class="line">        phoneNumber.setType(Person.PhoneType.WORK);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        stdout.println(<span class="string">"Unknown phone type.  Using default."</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      person.addPhones(phoneNumber);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> person.build();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Main function:  Reads the entire address book from a file,</span></span><br><span class="line">  <span class="comment">//   adds one person based on user input, then writes it back out to the same</span></span><br><span class="line">  <span class="comment">//   file.</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (args.length != <span class="number">1</span>) &#123;</span><br><span class="line">      System.err.println(<span class="string">"Usage:  AddPerson ADDRESS_BOOK_FILE"</span>);</span><br><span class="line">      System.exit(-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    AddressBook.Builder addressBook = AddressBook.newBuilder();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read the existing address book.</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      addressBook.mergeFrom(<span class="keyword">new</span> FileInputStream(args[<span class="number">0</span>]));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">      System.out.println(args[<span class="number">0</span>] + <span class="string">": File not found.  Creating a new file."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add an address.</span></span><br><span class="line">    addressBook.addPeople(</span><br><span class="line">      PromptForAddress(<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in)),</span><br><span class="line">                       System.out));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write the new address book back to disk.</span></span><br><span class="line">    FileOutputStream output = <span class="keyword">new</span> FileOutputStream(args[<span class="number">0</span>]);</span><br><span class="line">    addressBook.build().writeTo(output);</span><br><span class="line">    output.close();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>尝试读取文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.tutorial.AddressBookProtos.AddressBook;</span><br><span class="line"><span class="keyword">import</span> com.example.tutorial.AddressBookProtos.Person;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListPeople</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Iterates though all people in the AddressBook and prints info about them.</span></span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Print</span><span class="params">(AddressBook addressBook)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Person person: addressBook.getPeopleList()) &#123;</span><br><span class="line">      System.out.println(<span class="string">"Person ID: "</span> + person.getId());</span><br><span class="line">      System.out.println(<span class="string">"  Name: "</span> + person.getName());</span><br><span class="line">      <span class="keyword">if</span> (person.hasEmail()) &#123;</span><br><span class="line">        System.out.println(<span class="string">"  E-mail address: "</span> + person.getEmail());</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (Person.PhoneNumber phoneNumber : person.getPhonesList()) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (phoneNumber.getType()) &#123;</span><br><span class="line">          <span class="keyword">case</span> MOBILE:</span><br><span class="line">            System.out.print(<span class="string">"  Mobile phone #: "</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> HOME:</span><br><span class="line">            System.out.print(<span class="string">"  Home phone #: "</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> WORK:</span><br><span class="line">            System.out.print(<span class="string">"  Work phone #: "</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(phoneNumber.getNumber());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Main function:  Reads the entire address book from a file and prints all</span></span><br><span class="line">  <span class="comment">//   the information inside.</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (args.length != <span class="number">1</span>) &#123;</span><br><span class="line">      System.err.println(<span class="string">"Usage:  ListPeople ADDRESS_BOOK_FILE"</span>);</span><br><span class="line">      System.exit(-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read the existing address book.</span></span><br><span class="line">    AddressBook addressBook =</span><br><span class="line">      AddressBook.parseFrom(<span class="keyword">new</span> FileInputStream(args[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line">    Print(addressBook);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>如何拓展一个protocol buffer（新buffers向下兼容，旧buffers向上兼容）(<u><strong>考虑的是新旧代码上的兼容</strong></u>)</p><ul><li>you <em>must not</em> change the tag numbers of any existing fields.</li><li>you <em>must not</em> add or delete any required fields.</li><li>you <em>may</em> delete optional or repeated fields.</li><li>you <em>may</em> add new optional or repeated fields but you must use fresh tag numbers (i.e. tag numbers that were never used in this protocol buffer, not even by deleted fields).</li></ul><p>对于删除的可选字段</p><ul><li>读取新的文件时，旧代码设置为默认值，如果没有默认值，则是对应类型的默认值。重复字段为空。</li><li>读取旧的文件时，新代码会透明读取，即忽略被删除的字段。</li></ul><p>对于新增的可选字段</p><ul><li>读取新的文件时，旧代码会透明读取，即忽略被删除的字段。</li><li>读取旧的文件时，新代码设置为默认值，如果没有默认值，则是对应类型的默认值。重复字段为空。</li></ul></li><li><p>高级应用（反射）【以下为google翻译】</p><p>协议消息类提供的一个关键特性是反射。 您可以迭代消息的字段并操作它们的值，而无需针对任何特定消息类型编写代码。 使用反射的一个非常有用的方法是将协议消息转换为其他编码（例如XML或JSON）以及从其他编码转换。 更高级的反射使用可能是找到两个相同类型的消息之间的差异，或者开发一种“协议消息的正则表达式”，在其中可以编写匹配特定消息内容的表达式。 如果您使用自己的想象力，可以将Protocol Buffers应用于比您最初期望的更广泛的问题！</p></li></ul><h4 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h4><p>本质上就是提供了一个中间层，完成数据的定义和数据在具体代码中实现（提供的API：getset，序列化，解码编码，builder-merge等）的解耦。</p><h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h4><p><a href="https://developers.google.com/protocol-buffers/docs/javatutorial" target="_blank" rel="noopener">protocol buffers java tutorial</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本教程旨在让我们学会：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定义一个.proto文件&lt;/li&gt;
&lt;li&gt;使用 protocol buffer complier&lt;/li&gt;
&lt;li&gt;用户 Java protocol buffer API 来读写信息&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;
      
    
    </summary>
    
      <category term="tools" scheme="http://blog.youshouldknow.tech/categories/tools/"/>
    
    
      <category term="google" scheme="http://blog.youshouldknow.tech/tags/google/"/>
    
      <category term="protocol-buffers" scheme="http://blog.youshouldknow.tech/tags/protocol-buffers/"/>
    
  </entry>
  
  <entry>
    <title>hexo</title>
    <link href="http://blog.youshouldknow.tech/2019/01/13/some-exprience-about-hexo-first-use-it/"/>
    <id>http://blog.youshouldknow.tech/2019/01/13/some-exprience-about-hexo-first-use-it/</id>
    <published>2019-01-12T18:23:02.000Z</published>
    <updated>2019-01-12T20:01:25.875Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="tools" scheme="http://blog.youshouldknow.tech/categories/tools/"/>
    
    
      <category term="hexo" scheme="http://blog.youshouldknow.tech/tags/hexo/"/>
    
      <category term="blog" scheme="http://blog.youshouldknow.tech/tags/blog/"/>
    
  </entry>
  
</feed>
