<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YouShouldKnow</title>
  
  <subtitle>The world is wonderful, you should know more</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.youshouldknow.tech/"/>
  <updated>2019-09-25T10:54:36.300Z</updated>
  <id>http://blog.youshouldknow.tech/</id>
  
  <author>
    <name>Frank Zhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2019秋招总结和自省</title>
    <link href="http://blog.youshouldknow.tech/2019/09/25/2019%E7%A7%8B%E6%8B%9B%E6%80%BB%E7%BB%93%E5%92%8C%E8%87%AA%E7%9C%81/"/>
    <id>http://blog.youshouldknow.tech/2019/09/25/2019秋招总结和自省/</id>
    <published>2019-09-25T10:33:37.000Z</published>
    <updated>2019-09-25T10:54:36.300Z</updated>
    
    <content type="html"><![CDATA[<p>秋招即将结束了，国内的大厂基本都已经面完了，还剩下一些外企没有面完。感觉自己已经渐渐从秋招的状态中走出来了，为了避免忘记，因此写了这篇博客，用来记录自己的秋招经历，以及对此次秋招的一些总结和反省。</p><p>文章会分为以下两个部分：</p><ol><li>整个秋招的回顾</li><li>收获以及不足</li></ol><h4 id="Part1-秋招回顾"><a href="#Part1-秋招回顾" class="headerlink" title="Part1: 秋招回顾"></a>Part1: 秋招回顾</h4><p>首先列出目前面的公司以及拿到意向书的时间：</p><table><thead><tr><th>公司</th><th>时间</th></tr></thead><tbody><tr><td>TP-Link</td><td>6.27</td></tr><tr><td>华为星</td><td>7.24</td></tr><tr><td>腾讯TEG</td><td>8.23</td></tr><tr><td>网易游戏伏羲</td><td>8.30</td></tr><tr><td>阿里云</td><td>9.24</td></tr><tr><td>拼多多大数据</td><td>hc</td></tr></tbody></table><p>这次秋招的时间线拉的很长，实事上可以说从春招我就开始有意识的准备了。早期的思路比较简单，先挑肯定需要花长时间复习才有效果的内容开始复习。</p><p>于是从三月份开始就开始刷leetcode了，顺带着去学习之前一知半解的知识点。当时也会去看一些前辈的博客学习关于如何复习的以及一些知识点的整理和总结。在四月份的时候，我结合之前看的博客以及和小伙伴的交流，自己归纳了一个复习知识点的框架，然后往里面填东西。</p><blockquote><p><a href="https://github.com/pilife/knowledge-review" target="_blank" rel="noopener">https://github.com/pilife/knowledge-review</a></p></blockquote><p>接下来，我的复习主线就分为两个，刷题和知识点的学习。</p><p><strong>在刷题方面</strong>，我主要就是刷leetcode，我刷的方法是开始直接顺序刷，大约刷了120题左右，开始按类别刷，按类别刷了50题左右。这里我按类别刷主要是通过Google专门对女生的Program上的题目列表以及自己笔试的时候发现不足找相关类的题目刷。</p><p>说一点自己刷题的心得，可能不是每个人都适用。我是龟速刷的坚定代表者，这里的龟速刷是指尽量不看答案，给自己思考的时间会比较长，一题大概半个小时的思考时间我都是可以接受的（完全没有思路大约理性分析个10分钟，确认自己真的目前完全没有思路就会去看答案）。然后看答案也分几种，一种是大约扫一下关键词，知道这题的关键方法，比如iterator, heap等等。然后继续思考。。。一般这种提示出来之后会略微又一些思路。如果10分钟仍然想不出来，就会去看完整的答案。这样做的效果是，能够真切的体会到自己为什么没有想到。自己的思路哪里出了问题没有想到。这一点在总结和归纳各类解题方法的时候非常有用，能够清楚的知道每一题的特点从而导致使用什么样的解题方法。</p><p><strong>关于知识点复习</strong>，我的学习路线分为两条。<u>一条是复习零散的知识点</u>，这一块我的方式是由点到面。从一个小的知识点，会发现很多盲区，根据重要程度来确定是不是要去继续探索。<u>另一条是系统地复习</u>，比如说复习JAVA，系统的学习了《深入理解JVM》这本书。在系统学习的过程中也不能盲目顺着看。一般书的前几节会比较精彩，引人入胜。看到后面需要自己对自己提问，找到自己的兴趣点，然后查目录找到对应的地方进行学习，这样主动式的提出问题，在书中找到解答会很高效。</p><blockquote><p>知识点复习书籍：《深入理解JVM》,《DDIA》,《CSAPP》</p></blockquote><p>上面说了一些复习的心得，干脆把<strong>面试准备的心得</strong>也一并说了。首先是简历的准备，简历我用的是wondercv，在这之前我捣鼓了很多模版，有md的，有latex的，最后发现还是第三方提供的整套服务爽，自动一页纸，中英文简历，自动排序···总之果断买了会员。简历的撰写其实现在各种前辈总结的很好，主要是突出自己的工作重点，突出工作效果，以及故意暴露一些考点引诱面试官哈哈哈～然后面试的时候注意突出自己贡献以及效果，以及提到之前准备的考点。接下来就看面试官了，问到之前复习过的考点自然是好，没有问到或者问到自己准备的知识点盲区则也是宝贵的经验，面完赶快恶补，因为面试官问的问题一般都是经典的有价值的问题。面试最后可以咨询下求职部门的发展情况，数据的量级以及增长，主要业务是什么，以及对自己未来职业发展上的建议。这些都是很宝贵的，因为一般面到后面都是大佬，能够和大佬交流这些的机会很珍贵。</p><p>以上就是我的复习和面试的一些经验。我复习的时间大概是三月到五月，期间在华泰证券实习。当时正好也是春招的时间，投了腾讯，阿里的实习生，当时才开始复习，全都是一面挂。不过<u>当时的探索给我之后确定复习的方向很大的帮助</u>。之后六月到八月在头条实习，复习基本都是靠中午吃饭，晚上下班和周末挤出的时间。期间整个人都是打鸡血的。头条的实习不光是增加了实习经历这么简单，包括认识了很棒的伙伴，接触了工业界的内部平台，参加了toB的项目。给我的认知带来了非常大的改变，非常感谢头条，也感谢那个<u>勇于尝试新环境，勇于挑战的自己</u>。</p><p>下面按时间顺序聊一些各个公司的感受吧（仅限于我面试的部门和职位）。</p><ul><li>TP-LINK：报名的提前批。面试官应该不是搞大数据的，中规中矩，有点久远记不清了。</li><li>华为：报名的华为星计划<ul><li>一面一堆题目里选，手写题目，真‘手写’，题目很简单，我选了个难一些的解决了，和面试官探讨了下错误和正确的思路，整个过程很愉快。</li><li>二面基本在问我的素质，偏HR面。然后笔试+测评（测评挂了一次- -!）。</li></ul></li><li>腾讯：报的我女票计算所的定向招聘。哈哈哈，我也算半个计算所的人。<ul><li>一面电话面，面试官瞅着很年轻，问了些分布式相关的概念。有没有答上来了，比如zab，回去恶补。</li><li>二面面试官很特别，很有水平，问了我一些自己的见解和抽象。比如JVM的理解，垃圾回收的理解。真的很棒。考数据结构算法非常灵活，聊到哪算哪，最后特定情况下快排的稳定性的分析我脑抽还答错了（题目是我自己挖的坑- -），大写的尴尬。</li><li>三面面试官一开始很冷峻，气场很足，前面问了我Hbase的WAL优化我没有答上来，内心大写的不妙。后期问了两个问题，一个分桶的大数据题真的是我灵光乍现想出来的（之后恶补了这类题目）。最后算法不难，很快就写出来了。最后聊天阶段面试官竟然露出了和善的微笑。（瑟瑟发抖，好怕笑着说再见）</li></ul></li><li>网易：报名的提前批<ul><li>一面聊了很多JAVA的常用类底层实现。</li><li>二面时间很短，聊了常用的设计模式。</li><li>三面聊了一些想法，也考了一些linux的基本使用。特别的，三面面试官柏叔超级nice，特地又花了一个小时给我详细讲解了他们部门的情况。</li></ul></li><li>阿里：师兄内推<ul><li>一面是师兄的leader，师兄说这个跪了就和阿里再见了。。贼紧张，我记得当时等的时候手心都是汗。面起来之后就好了，聊了一些项目，做了三题不难的算法，聊了会儿LSM。</li><li>二面面试官考了一个几何题，当时通过特例想到了一丢丢思路，结果走岔了。考了一题24点。</li><li>三面面试官是部门大Boss。聊了很多他们部门做的东西，做了一题通配符匹配的题目。答的很一般，不是最优解。</li><li>交叉面面试官和腾讯二面面试官一样给我很深的印象。首先考了我一题很有意思的题目，是隐含的数列题。正解是斐波那契额数列。我一顿分析，把题目抽象成数列题，只答出来等比数列对应的解。忘了斐波那契通项公式。之后又问了我发人深省的问题，你觉得自己做的什么你最自豪？最后给了我一些未来工作上的建议，要找有价值的东西做。收获满满。</li></ul></li><li>pdd：学霸批。我可能是最菜的学霸批。<ul><li>一面视频面。问了我一些大数据相关系统的基本问题，spark shuffle，hbase以及一些具体场景的使用。问了跳表的优点，关于方便并行化这一点没有答上来。最后交流了部门的情况。</li><li>二面视频面，面试官上来考了正则匹配，10min写出来。我思路局限在之前写过的通配符匹配上了，没有转过弯来，转过来的时候已经过了一半时间了。。勉强写了关键的判断和递归。然后考了我hbase的原理以及hdfs的实现，这边有一些没有答上来比如hbase compact/split细节，hdfs快照原理以及存储问题。然后问了我一些自我认知。</li></ul></li></ul><h4 id="Part2-收获及不足"><a href="#Part2-收获及不足" class="headerlink" title="Part2: 收获及不足"></a>Part2: 收获及不足</h4><p>从三月到九月，半年的时间。这半年，有过迷茫，有过开心，有过失落。走过来发现这一路收获了很多，也有很多东西没有做到最好。</p><ul><li>首先，我最大的收获就是在头条实习的3个月，有眼界的提升，有认知的丰富，当然，还有体重的飙升:)。。总之非常感谢这段经历，nice的环境，nice的同事，给了我一个小小的蜕变。</li><li>其次是学会制定计划。可能说出来有些可笑，之前的我从来没有给自己认认真真的制定过系统的计划，最多就是一些短期的规划。这半年里，我第一次以半年为单位进行计划，包括了找工作，毕设，兴趣学习三个方面。以长期计划作为导向，激励自己，每当我觉得要放松的时候，这些计划总能给我神奇的力量。接着就是短期计划，也就是每一天，每一周要完成什么。两者结合，让我能够安稳地走在路上。</li><li>还有就是学习方式的不断改进。不断去思考改进自己的学习模式，总结出了非常适合我自己，以自我发掘兴趣为敲门砖的学习方法。辅助以一些帮助进入学习状态的手段（我用的是forest这个app），可以维持自己学习状态。</li><li>养成了日记的习惯，每天的规划以及收获会简短记录，回顾时知道自己每天没有白过，从而正向的激励自己。其实这个习惯是在头条实习的时候，每周需要总结周报，每个月需要自己提交考勤。得比较详细的记录了自己的工作。当我开始记之后，忽然发现原来每天做一个总结是非常自然且舒服的事情。</li><li>而且这段时间的学习，也加固了我技术上的根基。</li><li>坚持了半年每天背英语单词。</li></ul><p>以上就是收获了，虽然比较满意，但是其中还存在着很多的不足。</p><ul><li>最大的问题就是睡眠问题！习惯性熬夜。从而早上失去了很多时间和效率。</li><li>其次是偶尔的松懈问题，有时候太过放松，让自己处于一个不健康的状态，比如打一天的游戏。（但是隐形守护者是真的香- -||）</li><li>还有制定计划并不科学，很多短期计划设置的并不合理，很多计划并没有完成，导致自己暂时性的丧气/放松</li></ul><p>这些不足和问题，前两者已经养成习惯了，最后一条则可以通过不断的积累经验来调整。对于之前养成的坏习惯，一直以来都不能有效的改变。因此我尝试从书本上获得解决问题的方法，找到了一本经典的调整自我的书籍《The Road Less Traveled》，目前才开始看，但是推迟满足感这个原则，已经让我有意识的和寻求廉价满足感的自己对抗，开始调整自己的作息了。相应的我也已经开始着手做自己找完工作之后的长短期计划了，之后有时间会总结和分享自己计划的制定以及实施时遇到的问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;秋招即将结束了，国内的大厂基本都已经面完了，还剩下一些外企没有面完。感觉自己已经渐渐从秋招的状态中走出来了，为了避免忘记，因此写了这篇博客，用来记录自己的秋招经历，以及对此次秋招的一些总结和反省。&lt;/p&gt;
&lt;p&gt;文章会分为以下两个部分：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;整个秋招的
      
    
    </summary>
    
      <category term="成长" scheme="http://blog.youshouldknow.tech/categories/%E6%88%90%E9%95%BF/"/>
    
    
      <category term="秋招" scheme="http://blog.youshouldknow.tech/tags/%E7%A7%8B%E6%8B%9B/"/>
    
      <category term="实习" scheme="http://blog.youshouldknow.tech/tags/%E5%AE%9E%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>不懂这些，计算机网络你可能一无所知?</title>
    <link href="http://blog.youshouldknow.tech/2019/03/15/%E4%B8%8D%E6%87%82%E8%BF%99%E4%BA%9B%EF%BC%8C%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BD%A0%E5%8F%AF%E8%83%BD%E4%B8%80%E6%97%A0%E6%89%80%E7%9F%A5/"/>
    <id>http://blog.youshouldknow.tech/2019/03/15/不懂这些，计算机网络你可能一无所知/</id>
    <published>2019-03-15T13:45:17.000Z</published>
    <updated>2019-03-15T13:51:22.133Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>网络分层</p><p>| Layer       | Protocol                |<br>| ———– | ———————– |<br>| Application | Telnet, FTP, etc        |<br>| Transport   | TCP, UDP                |<br>| Network     | IP, ICMP                |<br>| Link        | drivers, interface card |</p></li><li><p>数据的单元：报文，报文段，分组/包，数据报，帧，数据单元</p><ul><li>Application Layer -&gt; 报文（message）</li><li>Transport Layer -&gt; TCP -&gt; 报文段（segment）</li><li>Transport/Network Layer -&gt; UDP/ IP -&gt; 数据报（datagram）</li><li>Transport/Network Layer -&gt; 分组/包（packet）</li><li>Link Layer -&gt; 帧（frame）</li></ul></li><li><p>TCP</p><ol><li><p>TCP Segment</p><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g13ip2xmihj30kp072jrj.jpg" alt="img"></p><p>以太网数据包（frame）的大小是固定的，最初是1518字节，后来增加到1522字节。其中， 1500 字节是负载（payload），22字节是头信息（head）。</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g13j80o5d6g30bm06qmwy.gif" alt="ip packet"></p><p>IP 数据包在以太网数据包的负载里面，它也有自己的头信息，最少需要20字节，所以 IP 数据包的负载最多为1480字节。</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1g13j7708d2g30b708i3yb.gif" alt="tcp packet"></p><p>TCP 数据包在 IP 数据包的负载里面。它的头信息最少也需要20字节，因此 TCP 数据包的最大负载是 1480 - 20 = 1460 字节。由于 IP 和 TCP 协议往往有额外的头信息，所以 TCP 负载实际为1400字节左右。</p><p>因此，一条1500字节的信息需要两个 TCP 数据包。HTTP/2 协议的一大改进， 就是压缩 HTTP 协议的头信息，使得一个 HTTP 请求可以放在一个 TCP 数据包里面，而不是分成多个，这样就提高了速度。</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1g13ivy3aetj30ix08j3yf.jpg" alt="img"></p></li><li><p>流程</p><ol><li>建立连接：三次握手</li><li>发送数据<ol><li>滑动窗口</li><li>慢启动</li></ol></li><li>断开连接：四次挥手</li></ol></li><li><p>优点</p><ul><li>面向连接</li><li>具备顺序控制</li><li>重发控制等机制</li></ul></li><li><p>应用场景</p><p>可以为应用提供可靠的传输。</p></li></ol></li><li><p>UDP</p><ol><li><p>UDP packet</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1g13jpm4luog30aa03a3y9.gif" alt="img"></p></li><li><p>流程</p></li><li><p>优点</p><blockquote><p>UDP数据包长度</p><p>在本机(loopback)传输，可以根据需要设置MTU，但记住，UDP最大理论长度65507。</p><p>在内网传输，最好控制在1472字节(1500-8-20)。</p><p>在internet上传输，最好控制在548字节(576-8-20)以内。</p></blockquote><blockquote><p> UDP收包能力</p><p>UDP处理能力非常可观，在日常的业务情形中，UDP一般不会成为性能瓶颈。</p><p>随着进程个数的增加，处理能力未明显上升，但是丢包个数明显下降。</p><p>采用多进程监听不同端口的模型，而不是多进程或多线程监听同一个端口。</p></blockquote></li><li><p>应用场景</p><p>media streaming </p></li></ol></li><li><p>IP分片与重组</p></li></ul><p>Reference:</p><blockquote><p><a href="https://stackoverflow.com/questions/11636405/definition-of-network-units-fragment-segment-packet-frame-datagram" target="_blank" rel="noopener">Exploring the anatomy of a data packet</a></p><p><a href="https://www.techrepublic.com/article/exploring-the-anatomy-of-a-data-packet/" target="_blank" rel="noopener">Definition of Network Units: Fragment, Segment, Packet, Frame, Datagram</a></p><p><a href="https://blog.csdn.net/github_35124642/article/details/52006185" target="_blank" rel="noopener">IP分片和重组</a></p><p><a href="https://www.cnblogs.com/linuxbug/p/4906000.html" target="_blank" rel="noopener">浅谈UDP(数据包长度，收包能力，丢包及进程结构选择)</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;网络分层&lt;/p&gt;
&lt;p&gt;| Layer       | Protocol                |&lt;br&gt;| ———– | ———————– |&lt;br&gt;| Application | Telnet, FTP, etc        |&lt;br&gt;| T
      
    
    </summary>
    
      <category term="youshouldknow" scheme="http://blog.youshouldknow.tech/categories/youshouldknow/"/>
    
    
      <category term="tcp" scheme="http://blog.youshouldknow.tech/tags/tcp/"/>
    
      <category term="udp" scheme="http://blog.youshouldknow.tech/tags/udp/"/>
    
      <category term="ip" scheme="http://blog.youshouldknow.tech/tags/ip/"/>
    
  </entry>
  
  <entry>
    <title>吉他练习心得（从新手成长进阶的过程和总结）</title>
    <link href="http://blog.youshouldknow.tech/2019/02/19/%E5%90%89%E4%BB%96%E7%BB%83%E4%B9%A0%E5%BF%83%E5%BE%97%EF%BC%88%E4%BB%8E%E6%96%B0%E6%89%8B%E6%88%90%E9%95%BF%E8%BF%9B%E9%98%B6%E7%9A%84%E8%BF%87%E7%A8%8B%E5%92%8C%E6%80%BB%E7%BB%93%EF%BC%89/"/>
    <id>http://blog.youshouldknow.tech/2019/02/19/吉他练习心得（从新手成长进阶的过程和总结）/</id>
    <published>2019-02-19T05:45:24.000Z</published>
    <updated>2019-02-19T05:47:21.393Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="音乐" scheme="http://blog.youshouldknow.tech/categories/%E9%9F%B3%E4%B9%90/"/>
    
    
      <category term="吉他练习" scheme="http://blog.youshouldknow.tech/tags/%E5%90%89%E4%BB%96%E7%BB%83%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>乐理知识整理（持续学习中）</title>
    <link href="http://blog.youshouldknow.tech/2019/02/19/%E4%B9%90%E7%90%86%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%EF%BC%88%E6%8C%81%E7%BB%AD%E5%AD%A6%E4%B9%A0%E4%B8%AD%EF%BC%89/"/>
    <id>http://blog.youshouldknow.tech/2019/02/19/乐理知识整理（持续学习中）/</id>
    <published>2019-02-19T05:44:24.000Z</published>
    <updated>2019-03-01T16:19:16.401Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="大白话音乐的基本概念"><a href="#大白话音乐的基本概念" class="headerlink" title="大白话音乐的基本概念"></a>大白话音乐的基本概念</h2><h3 id="声音的物理原理"><a href="#声音的物理原理" class="headerlink" title="声音的物理原理"></a>声音的物理原理</h3><p>声音是一种波，所以由<u>振幅，频率，相位</u></p><p><em>振幅</em>就是通常所说的<strong>音量(volume)</strong></p><p><em>频率</em>则是<strong>音高(pitch)</strong></p><p>波的叠加产生了不同的<strong>音色(timbre)</strong>，这里也涉及到了不同<em>相位波的叠加</em></p><h3 id="音乐的三要素"><a href="#音乐的三要素" class="headerlink" title="音乐的三要素"></a>音乐的三要素</h3><p>节奏，旋律，和声</p><p>节奏是音乐的生命</p><p>旋律是音乐的感情走向</p><p>和声是使音乐表现力更加丰富</p><h3 id="音高的划分—12平均律"><a href="#音高的划分—12平均律" class="headerlink" title="音高的划分—12平均律"></a>音高的划分—12平均律</h3><h3 id="音名，唱名"><a href="#音名，唱名" class="headerlink" title="音名，唱名"></a>音名，唱名</h3><h3 id="为什么划分这些唱名？"><a href="#为什么划分这些唱名？" class="headerlink" title="为什么划分这些唱名？"></a>为什么划分这些唱名？</h3><h3 id="和弦"><a href="#和弦" class="headerlink" title="和弦"></a>和弦</h3><h3 id="常用和弦进行"><a href="#常用和弦进行" class="headerlink" title="常用和弦进行"></a>常用和弦进行</h3><h3 id="什么是调？C调，D调，XX调到底是啥"><a href="#什么是调？C调，D调，XX调到底是啥" class="headerlink" title="什么是调？C调，D调，XX调到底是啥"></a>什么是调？C调，D调，XX调到底是啥</h3><h2 id="识谱，不要做文盲！"><a href="#识谱，不要做文盲！" class="headerlink" title="识谱，不要做文盲！"></a>识谱，不要做文盲！</h2><h3 id="五线谱：音乐的语言"><a href="#五线谱：音乐的语言" class="headerlink" title="五线谱：音乐的语言"></a>五线谱：音乐的语言</h3><h3 id="六线谱：万一按错了呢，还是要这个纠正下"><a href="#六线谱：万一按错了呢，还是要这个纠正下" class="headerlink" title="六线谱：万一按错了呢，还是要这个纠正下"></a>六线谱：万一按错了呢，还是要这个纠正下</h3><h2 id="练琴心得"><a href="#练琴心得" class="headerlink" title="练琴心得"></a>练琴心得</h2><h3 id="关于爬格子"><a href="#关于爬格子" class="headerlink" title="关于爬格子"></a>关于爬格子</h3><p>必要性：顶尖的大师，每天也都会爬格子，何况吾等。能够让你的手指灵活，有力，独立。</p><p>推荐爬格子方法：从60开始，声音饱满节奏稳定以后提速5，正常爬格子速度一般练到100+ ，保留指爬格子一般练到80速左右。 节拍使用四四拍，四分音符，每个音符弹两下。</p><p>爬格子注意：一定要集中注意力爬格子！！一定要集中注意力爬格子！！一定要集中注意力爬格子！！不要以为这是机械的动作就不要注意力了，集中注意，打开手指，努力张开到最大，按的最接近品柱。不然爬格子并不会带来上述收益。</p><p>对了，很努力的爬格子之后，再按和弦会感觉手指很灵活，很轻松。和健身做完大重量做小重量类似的感觉。</p><h3 id="关于单音练习"><a href="#关于单音练习" class="headerlink" title="关于单音练习"></a>关于单音练习</h3><p>在谈的时候，放空大脑，感受指尖的飞舞，啊～Stop！单音练习一定要把谈的音唱出来，这样才能增加音名和指板位置的map的熟悉度。最后可以做到<strong>视谱</strong>就靠这个了。</p><h2 id="小机灵鬼的问题"><a href="#小机灵鬼的问题" class="headerlink" title="小机灵鬼的问题"></a>小机灵鬼的问题</h2><ol><li><p>音色是什么？</p><p>谐波</p></li><li><p>为什么有的分解和弦，最后的音会变成空弦？</p><p>因为吉他手为了转换和弦的方便，提前移走了。由于不是根音（音乐的创作原理），影响不是很大就可以接受，而且可能会有意想不到的效果哦。</p></li><li><p>为什么要学习不同的调的指法呢，变调夹不是能解决一切么？</p><p>变调夹虽然很厉害，让你只会C调的指法（音阶在指板上的位置熟悉），却可以弹其他调。但是！！如果一首歌有好几个调呢，难道你要快速移动变调夹吗HH。所以不要偷懒机灵鬼们。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;大白话音乐的基本概念&quot;&gt;&lt;a href=&quot;#大白话音乐的基本概念&quot; class=&quot;headerlink&quot; title=&quot;大白话音乐的基本概念&quot;&gt;&lt;/a&gt;大白话音乐的基本概念&lt;/h2&gt;&lt;h3 id=&quot;声音的物理原理&quot;&gt;&lt;a href=&quot;#声
      
    
    </summary>
    
      <category term="音乐" scheme="http://blog.youshouldknow.tech/categories/%E9%9F%B3%E4%B9%90/"/>
    
    
      <category term="乐理" scheme="http://blog.youshouldknow.tech/tags/%E4%B9%90%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>健身理论OverView</title>
    <link href="http://blog.youshouldknow.tech/2019/02/19/%E5%81%A5%E8%BA%AB%E7%90%86%E8%AE%BAOverView/"/>
    <id>http://blog.youshouldknow.tech/2019/02/19/健身理论OverView/</id>
    <published>2019-02-19T05:42:24.000Z</published>
    <updated>2019-02-19T05:46:42.328Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="健身" scheme="http://blog.youshouldknow.tech/categories/%E5%81%A5%E8%BA%AB/"/>
    
    
      <category term="健身" scheme="http://blog.youshouldknow.tech/tags/%E5%81%A5%E8%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>2018 11 inch ipad pro</title>
    <link href="http://blog.youshouldknow.tech/2019/02/19/2018-11-inch-ipad-pro/"/>
    <id>http://blog.youshouldknow.tech/2019/02/19/2018-11-inch-ipad-pro/</id>
    <published>2019-02-19T05:37:57.000Z</published>
    <updated>2019-02-19T05:39:10.678Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="tech experiment" scheme="http://blog.youshouldknow.tech/categories/tech-experiment/"/>
    
    
      <category term="ipad pro" scheme="http://blog.youshouldknow.tech/tags/ipad-pro/"/>
    
      <category term="apple" scheme="http://blog.youshouldknow.tech/tags/apple/"/>
    
  </entry>
  
  <entry>
    <title>protocol buffers</title>
    <link href="http://blog.youshouldknow.tech/2019/01/13/protocol-buffers/"/>
    <id>http://blog.youshouldknow.tech/2019/01/13/protocol-buffers/</id>
    <published>2019-01-12T19:54:44.000Z</published>
    <updated>2019-01-12T20:00:47.856Z</updated>
    
    <content type="html"><![CDATA[<p>本教程旨在让我们学会：</p><ol><li>定义一个.proto文件</li><li>使用 protocol buffer complier</li><li>用户 Java protocol buffer API 来读写信息</li></ol><h4 id="首先我们结合实际的应用场景来了解一下，为什么需要protocol-buffers"><a href="#首先我们结合实际的应用场景来了解一下，为什么需要protocol-buffers" class="headerlink" title="首先我们结合实际的应用场景来了解一下，为什么需要protocol buffers?"></a>首先我们结合实际的应用场景来了解一下，为什么需要protocol buffers?</h4><p>这里我们是用一个通讯录对文件的读写来完成对用户通讯信息的读写的例子作为介绍。</p><p>当我们要序列化和以及恢复这种有结构的数据，有如下几种方法。</p><ul><li>利用Java的序列化机制。但是存在如下问题：<ul><li>存在许多众所周知的问题 (see Effective Java, by Josh Bloch pp. 213)</li><li>不能很好地和其他语言C++/Python共享数据（和语言的耦合性太高）</li></ul></li><li>自定义一个特定的（ad-hoc）方式把数据项编码成一个字符串。比如将四个整数编码为”12:3:-23:67”。这是一种简单而灵活的方法，尽管它需要编写一次性（这里的英文是one-off, 意思为happen only once，我理解是只适用于这个场景的解码和编码方法，因此翻译为一次性的）的编码和解码的代码，而且解码会产生很小的运行时间成本。所以这种方式很适合编码简单的数据。</li><li>将数据序列化为XML。 这种方法可能非常有吸引力，因为XML是可读的，并且有许多语言的绑定库。 如果您想与其他应用程序/项目共享数据，这可能是一个不错的选择。 然而，XML是众所周知的空间密集型，<u>编码/解码可能会给应用程序带来巨大的性能损失</u>。 另外，导航XML DOM树比导航类中的简单字段通常要复杂得多。</li></ul><p>Protocol buffers是解决这个问题的灵活，高效的自动化解决方案。</p><p>你只需要写一个你想要存储的数据结构的描述.proto文件。之后protocol buffer compiler会创建一个类。这个类</p><ol><li>用高效的二进制格式实现了自动编码和解码。</li><li>对字段提供了getters和setters。</li><li>将读写的细节作为一个单元处理</li><li>支持拓展格式，并且保持对旧的编码的数据读取的兼容。</li></ol><h4 id="下面介绍具体的使用："><a href="#下面介绍具体的使用：" class="headerlink" title="下面介绍具体的使用："></a>下面介绍具体的使用：</h4><ul><li><p>定义.proto文件的方式</p><ul><li>Extend info<ul><li>package（区分不同project）</li><li>java_package（java的包, default=package）</li><li>java_outer_classname（java的类名, default=filename2camelcase）</li></ul></li><li>Massage declaration<ul><li>field types(default value): bool(false), int32(0), float(0), double(0), string(“”)</li><li>enum定义</li><li>tag: field在二进制编码中使用的标记。所以1-15（需要少于一个字节）一般赋予常用的和repeated的元素。&gt;=16的给一些不常使用的optional元素。</li><li>modifiers: required(少用，对拓展限制很强), optional, repeated</li></ul></li></ul><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">"proto2"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> tutorial;</span><br><span class="line"></span><br><span class="line"><span class="keyword">option</span> java_package = <span class="string">"com.example.tutorial"</span>;</span><br><span class="line"><span class="keyword">option</span> java_outer_classname = <span class="string">"AddressBookProtos"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">required</span> <span class="built_in">string</span> name = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">required</span> <span class="built_in">int32</span> id = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">optional</span> <span class="built_in">string</span> email = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">enum</span> <span class="title">PhoneType</span> </span>&#123;</span><br><span class="line">    MOBILE = <span class="number">0</span>;</span><br><span class="line">    HOME = <span class="number">1</span>;</span><br><span class="line">    WORK = <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">message</span> <span class="title">PhoneNumber</span> </span>&#123;</span><br><span class="line">    <span class="keyword">required</span> <span class="built_in">string</span> number = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">optional</span> PhoneType type = <span class="number">2</span> [default = HOME];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">repeated</span> PhoneNumber phones = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">AddressBook</span> </span>&#123;</span><br><span class="line">  <span class="keyword">repeated</span> Person people = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编译该文件(-I用于import)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protoc -I=$SRC_DIR --java_out=$DST_DIR $SRC_DIR/addressbook.proto</span><br></pre></td></tr></table></figure></li><li><p>生成的Class文件如何使用（生成了什么，提供了什么功能）</p><ul><li><p>生成了Message对应的class。每个class有自己的Builder。且由protocol compiler生成的类都是对应JAVA风格的驼峰命名。<u>这里建议在.proto文件中使用小写字母+下划线</u>。（因为protocol compiler是在小写字母+下划线规范上，解析生成对应语言的风格的代码）</p></li><li><p>Message: 信息对象，immutable，不可被修改</p><ul><li>Singular field: has, get</li><li>Repeated fields: getList, getCount, get(index)</li><li>标准方法，Message接口声明的<ul><li>isInitialized(): checks if all the required fields have been set.</li><li>toString(): returns a human-readable representation of the message, particularly useful for debugging</li></ul></li><li>序列化和解码<ul><li>byte[] toByteArray();: serializes the message and returns a byte array containing its raw bytes.</li><li>static Person parseFrom(byte[] data);: parses a message from the given byte array.</li><li>void writeTo(OutputStream output);: serializes the message and writes it to an OutputStream.</li><li>static Person parseFrom(InputStream input);: reads and parses a message from an InputStream.</li></ul></li></ul></li><li><p>Builder: 信息对象的构造器，用来创建massage对象</p><ul><li>Singular field: has, get, set, clear</li><li>Repeated fields: getList, getCount, get(index), set(index, value), add(value), addAll(value), clear</li><li>标准方法，Message.Builder接口声明的<ul><li>isInitialized()</li><li>toString()</li><li>mergeFrom(Message other):  merges the contents of other into this message, overwriting singular scalar fields, merging composite fields, and concatenating repeated fields</li><li>clear(): clears all the fields back to the empty state</li></ul></li></ul></li><li><p>Enums and Nested Classes:</p><p>枚举类型会自动在声明的类的内部生成</p></li></ul><blockquote><p>由于协议缓冲区类基本上是哑数据持有者（如C中的strcuts），所以注意这里要拓展数据类的功能，比如添加一些行为，不可以通过继承的方式，因为这将打破protocol buffer内部的机制。可以通过包装(wrap)数据类到特定于应用程序的类中。（适配器模式）</p></blockquote></li><li><p>尝试写入文件</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.tutorial.AddressBookProtos.AddressBook;</span><br><span class="line"><span class="keyword">import</span> com.example.tutorial.AddressBookProtos.Person;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddPerson</span> </span>&#123;</span><br><span class="line">  <span class="comment">// This function fills in a Person message based on user input.</span></span><br><span class="line">  <span class="function"><span class="keyword">static</span> Person <span class="title">PromptForAddress</span><span class="params">(BufferedReader stdin,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 PrintStream stdout)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Person.Builder person = Person.newBuilder();</span><br><span class="line"></span><br><span class="line">    stdout.print(<span class="string">"Enter person ID: "</span>);</span><br><span class="line">    person.setId(Integer.valueOf(stdin.readLine()));</span><br><span class="line"></span><br><span class="line">    stdout.print(<span class="string">"Enter name: "</span>);</span><br><span class="line">    person.setName(stdin.readLine());</span><br><span class="line"></span><br><span class="line">    stdout.print(<span class="string">"Enter email address (blank for none): "</span>);</span><br><span class="line">    String email = stdin.readLine();</span><br><span class="line">    <span class="keyword">if</span> (email.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      person.setEmail(email);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">      stdout.print(<span class="string">"Enter a phone number (or leave blank to finish): "</span>);</span><br><span class="line">      String number = stdin.readLine();</span><br><span class="line">      <span class="keyword">if</span> (number.length() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      Person.PhoneNumber.Builder phoneNumber =</span><br><span class="line">        Person.PhoneNumber.newBuilder().setNumber(number);</span><br><span class="line"></span><br><span class="line">      stdout.print(<span class="string">"Is this a mobile, home, or work phone? "</span>);</span><br><span class="line">      String type = stdin.readLine();</span><br><span class="line">      <span class="keyword">if</span> (type.equals(<span class="string">"mobile"</span>)) &#123;</span><br><span class="line">        phoneNumber.setType(Person.PhoneType.MOBILE);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">"home"</span>)) &#123;</span><br><span class="line">        phoneNumber.setType(Person.PhoneType.HOME);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">"work"</span>)) &#123;</span><br><span class="line">        phoneNumber.setType(Person.PhoneType.WORK);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        stdout.println(<span class="string">"Unknown phone type.  Using default."</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      person.addPhones(phoneNumber);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> person.build();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Main function:  Reads the entire address book from a file,</span></span><br><span class="line">  <span class="comment">//   adds one person based on user input, then writes it back out to the same</span></span><br><span class="line">  <span class="comment">//   file.</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (args.length != <span class="number">1</span>) &#123;</span><br><span class="line">      System.err.println(<span class="string">"Usage:  AddPerson ADDRESS_BOOK_FILE"</span>);</span><br><span class="line">      System.exit(-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    AddressBook.Builder addressBook = AddressBook.newBuilder();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read the existing address book.</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      addressBook.mergeFrom(<span class="keyword">new</span> FileInputStream(args[<span class="number">0</span>]));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">      System.out.println(args[<span class="number">0</span>] + <span class="string">": File not found.  Creating a new file."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add an address.</span></span><br><span class="line">    addressBook.addPeople(</span><br><span class="line">      PromptForAddress(<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in)),</span><br><span class="line">                       System.out));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write the new address book back to disk.</span></span><br><span class="line">    FileOutputStream output = <span class="keyword">new</span> FileOutputStream(args[<span class="number">0</span>]);</span><br><span class="line">    addressBook.build().writeTo(output);</span><br><span class="line">    output.close();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>尝试读取文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.tutorial.AddressBookProtos.AddressBook;</span><br><span class="line"><span class="keyword">import</span> com.example.tutorial.AddressBookProtos.Person;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListPeople</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Iterates though all people in the AddressBook and prints info about them.</span></span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Print</span><span class="params">(AddressBook addressBook)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Person person: addressBook.getPeopleList()) &#123;</span><br><span class="line">      System.out.println(<span class="string">"Person ID: "</span> + person.getId());</span><br><span class="line">      System.out.println(<span class="string">"  Name: "</span> + person.getName());</span><br><span class="line">      <span class="keyword">if</span> (person.hasEmail()) &#123;</span><br><span class="line">        System.out.println(<span class="string">"  E-mail address: "</span> + person.getEmail());</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (Person.PhoneNumber phoneNumber : person.getPhonesList()) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (phoneNumber.getType()) &#123;</span><br><span class="line">          <span class="keyword">case</span> MOBILE:</span><br><span class="line">            System.out.print(<span class="string">"  Mobile phone #: "</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> HOME:</span><br><span class="line">            System.out.print(<span class="string">"  Home phone #: "</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> WORK:</span><br><span class="line">            System.out.print(<span class="string">"  Work phone #: "</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(phoneNumber.getNumber());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Main function:  Reads the entire address book from a file and prints all</span></span><br><span class="line">  <span class="comment">//   the information inside.</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (args.length != <span class="number">1</span>) &#123;</span><br><span class="line">      System.err.println(<span class="string">"Usage:  ListPeople ADDRESS_BOOK_FILE"</span>);</span><br><span class="line">      System.exit(-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read the existing address book.</span></span><br><span class="line">    AddressBook addressBook =</span><br><span class="line">      AddressBook.parseFrom(<span class="keyword">new</span> FileInputStream(args[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line">    Print(addressBook);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>如何拓展一个protocol buffer（新buffers向下兼容，旧buffers向上兼容）(<u><strong>考虑的是新旧代码上的兼容</strong></u>)</p><ul><li>you <em>must not</em> change the tag numbers of any existing fields.</li><li>you <em>must not</em> add or delete any required fields.</li><li>you <em>may</em> delete optional or repeated fields.</li><li>you <em>may</em> add new optional or repeated fields but you must use fresh tag numbers (i.e. tag numbers that were never used in this protocol buffer, not even by deleted fields).</li></ul><p>对于删除的可选字段</p><ul><li>读取新的文件时，旧代码设置为默认值，如果没有默认值，则是对应类型的默认值。重复字段为空。</li><li>读取旧的文件时，新代码会透明读取，即忽略被删除的字段。</li></ul><p>对于新增的可选字段</p><ul><li>读取新的文件时，旧代码会透明读取，即忽略被删除的字段。</li><li>读取旧的文件时，新代码设置为默认值，如果没有默认值，则是对应类型的默认值。重复字段为空。</li></ul></li><li><p>高级应用（反射）【以下为google翻译】</p><p>协议消息类提供的一个关键特性是反射。 您可以迭代消息的字段并操作它们的值，而无需针对任何特定消息类型编写代码。 使用反射的一个非常有用的方法是将协议消息转换为其他编码（例如XML或JSON）以及从其他编码转换。 更高级的反射使用可能是找到两个相同类型的消息之间的差异，或者开发一种“协议消息的正则表达式”，在其中可以编写匹配特定消息内容的表达式。 如果您使用自己的想象力，可以将Protocol Buffers应用于比您最初期望的更广泛的问题！</p></li></ul><h4 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h4><p>本质上就是提供了一个中间层，完成数据的定义和数据在具体代码中实现（提供的API：getset，序列化，解码编码，builder-merge等）的解耦。</p><h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h4><p><a href="https://developers.google.com/protocol-buffers/docs/javatutorial" target="_blank" rel="noopener">protocol buffers java tutorial</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本教程旨在让我们学会：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定义一个.proto文件&lt;/li&gt;
&lt;li&gt;使用 protocol buffer complier&lt;/li&gt;
&lt;li&gt;用户 Java protocol buffer API 来读写信息&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;
      
    
    </summary>
    
      <category term="tools" scheme="http://blog.youshouldknow.tech/categories/tools/"/>
    
    
      <category term="google" scheme="http://blog.youshouldknow.tech/tags/google/"/>
    
      <category term="protocol-buffers" scheme="http://blog.youshouldknow.tech/tags/protocol-buffers/"/>
    
  </entry>
  
  <entry>
    <title>hexo</title>
    <link href="http://blog.youshouldknow.tech/2019/01/13/some-exprience-about-hexo-first-use-it/"/>
    <id>http://blog.youshouldknow.tech/2019/01/13/some-exprience-about-hexo-first-use-it/</id>
    <published>2019-01-12T18:23:02.000Z</published>
    <updated>2019-01-12T20:01:25.875Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="tools" scheme="http://blog.youshouldknow.tech/categories/tools/"/>
    
    
      <category term="hexo" scheme="http://blog.youshouldknow.tech/tags/hexo/"/>
    
      <category term="blog" scheme="http://blog.youshouldknow.tech/tags/blog/"/>
    
  </entry>
  
</feed>
